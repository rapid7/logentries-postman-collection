{
	"variables": [],
	"info": {
		"name": "Logentries API",
		"_postman_id": "add73d67-b346-0fcc-3607-3fe97f05e088",
		"description": "The Logentries REST API provides a powerful way for your users and systems to programmatically manipulate the Logentries platform without accessing the user interface.\n\nThe documentation for the endpoints as well as example responses can be found at [https://docs.logentries.com/docs/rest-api](https://docs.logentries.com/docs/rest-api?source=postman)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Example Queries",
			"description": "You'll need to click on the continue link for these queries if they don't complete in the original query",
			"item": [
				{
					"name": "Get all events today",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "tests[\"Status code is 202\"] = responseCode.code === 202;\ntests[\"Response time is less than 1s\"] = responseTime < 1000;\n\nif (responseCode.code === 202) {\n    var jsonData = JSON.parse(responseBody);\n    \n    tests[\"A continue link is there\"] = jsonData.links[0].rel === \"Self\";\n    tests[\"leql statement is good\"] = jsonData.leql.statement === \"where(/.*/)\";\n    tests[\"leql time range is good\"] = jsonData.leql.during.time_range === \"Today\";\n    \n    postman.setEnvironmentVariable(\"continue_link\", jsonData.links[0].href);\n}"
							}
						}
					],
					"request": {
						"url": "{{url}}/query/logs",
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{read_only_key}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"logs\": [\n    \"{{log_id}}\"\n  ],\n  \"leql\": {\n    \"during\": {\n      \"time_range\" : \"Today\"\n    },\n    \"statement\" : \"where(/.*/)\"\n  }\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Count events yesterday",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "tests[\"Status code is 202\"] = responseCode.code === 202;\ntests[\"Response time is less than 1s\"] = responseTime < 1000;\n\nif (responseCode.code === 202) {\n    var jsonData = JSON.parse(responseBody);\n    \n    tests[\"A continue link is there\"] = jsonData.links[0].rel === \"Self\";\n    tests[\"leql statement is good\"] = jsonData.leql.statement === \"calculate(count)\";\n    tests[\"leql time range is good\"] = jsonData.leql.during.time_range === \"yesterday\";\n    \n    postman.setEnvironmentVariable(\"continue_link\", jsonData.links[0].href);\n}"
							}
						}
					],
					"request": {
						"url": "{{url}}/query/logs",
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{read_only_key}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"logs\": [\n    \"{{log_id}}\"\n  ],\n  \"leql\": {\n    \"during\": {\n      \"time_range\" : \"yesterday\"\n    },\n    \"statement\": \"calculate(count)\"\n  }\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get average values of key per hour today",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "tests[\"Status code is 202\"] = responseCode.code === 202;\ntests[\"Response time is less than 300ms\"] = responseTime < 300;\n\nif (responseCode.code === 200) {\n    var jsonData = JSON.parse(responseBody);\n    \n    tests[\"A continue link is there\"] = jsonData.links[0].rel === \"Self\";\n    tests[\"leql statement is good\"] = jsonData.leql.statement === \"calculate(average:service) timeslice(1h)\";\n    tests[\"leql time range is good\"] = jsonData.leql.during.time_range === \"today\";\n    \n    postman.setEnvironmentVariable(\"continue_link\", jsonData.links[0].href);\n}"
							}
						}
					],
					"request": {
						"url": "{{url}}/query/logs",
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{read_only_key}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"logs\": [\n    \"{{log_id}}\"\n  ],\n  \"leql\": {\n    \"during\": {\n      \"time_range\" : \"today\"\n    },\n    \"statement\": \"calculate(average:service) timeslice(1h)\"\n  }\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get standard deviation of key's value per hour today",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "tests[\"Status code is 202\"] = responseCode.code === 202;\ntests[\"Response time is less than 300ms\"] = responseTime < 300;\n\nif (responseCode.code === 200) {\n    var jsonData = JSON.parse(responseBody);\n    \n    tests[\"A continue link is there\"] = jsonData.links[0].rel === \"Self\";\n    tests[\"leql statement is good\"] = jsonData.leql.statement === \"calculate(standarddeviation:service) timeslice(1h)\";\n    tests[\"leql time range is good\"] = jsonData.leql.during.time_range === \"today\";\n    \n    postman.setEnvironmentVariable(\"continue_link\", jsonData.links[0].href);\n}"
							}
						}
					],
					"request": {
						"url": "{{url}}/query/logs",
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{read_only_key}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"logs\": [\n    \"{{log_id}}\"\n  ],\n  \"leql\": {\n    \"during\": {\n      \"time_range\" : \"today\"\n    },\n    \"statement\": \"calculate(standarddeviation:service) timeslice(1h)\"\n  }\n}"
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Log Management",
			"description": "",
			"item": [
				{
					"name": "Get all Logs",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\nif (responseCode.code === 200) {\n    var jsonData = JSON.parse(responseBody);\n    tests[\"A not empty array of tags is returned\"] = jsonData.logs.length > 0;\n}"
							}
						}
					],
					"request": {
						"url": "{{url}}/management/logs",
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{read_only_key}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": "Get a list of all Logs for a given account"
					},
					"response": []
				},
				{
					"name": "Get specific log details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\nif (responseCode.code === 200) {\n    var jsonData = JSON.parse(responseBody);\n    \n    tests[\"log_id matches expected log id\"] = jsonData.log.id === environment.log_id;\n    tests[\"log is called log1\"] = jsonData.log.name === \"Log1\";\n    tests[\"there are no structures applied\"] = jsonData.log.structures.length === 0;\n    tests[\"The log is in at least 1 log set\"] = jsonData.log.groups.length > 0;\n}"
							}
						}
					],
					"request": {
						"url": "{{url}}/management/logs/{{log_id}}",
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{read_only_key}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Make a new log",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "tests[\"Status code is 201\"] = responseCode.code === 201;\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\nif (responseCode.code === 201) {\n    var jsonData = JSON.parse(responseBody);\n    \n    tests[\"log has correct name\"] = jsonData.log.name === \"Postman New Log\";\n    tests[\"there are no structures applied\"] = jsonData.log.structures.length === 0;\n    tests[\"The log is in no log sets\"] = jsonData.log.groups.length === 0;\n    tests[\"I get a log token for the new log\"] = jsonData.log.tokens.length > 0;\n    \n    postman.setEnvironmentVariable(\"new_log_id\", jsonData.log.id);\n}"
							}
						}
					],
					"request": {
						"url": "{{url}}/management/logs/",
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{read_write_key}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"log\": {\n    \"name\": \"Postman New Log\",\n    \"groups\": []\n  }\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Edit new log name",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "tests[\"Status code is 201\"] = responseCode.code === 201;\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\nif (responseCode.code === 201) {\n    var jsonData = JSON.parse(responseBody);\n    \n    tests[\"log is renamed\"] = jsonData.log.name === \"Postman changed name\";\n}"
							}
						}
					],
					"request": {
						"url": "{{url}}/management/logs/{{new_log_id}}",
						"method": "PATCH",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{read_write_key}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"log\": {\n    \"name\": \"Postman changed name\"\n  }\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete newly created log",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "tests[\"Status code is 204\"] = responseCode.code === 204;\ntests[\"Response time is less than 1s\"] = responseTime < 1000;\n\npostman.clearEnvironmentVariable(\"new_log_id\");\n"
							}
						}
					],
					"request": {
						"url": "{{url}}/management/logs/{{new_log_id}}",
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{read_write_key}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"log\": {\n    \"name\": \"Postman New Log\",\n    \"groups\": []\n  }\n}"
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Query with continue set up",
			"description": "",
			"item": [
				{
					"name": "Query log for events",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "tests[\"Status code is 202\"] = responseCode.code === 202;\ntests[\"Response time is less than 300ms\"] = responseTime < 300;\n\nif (responseCode.code === 202) {\n    var jsonData = JSON.parse(responseBody);\n    \n    tests[\"A continue link is there\"] = jsonData.links[0].rel === \"Self\";\n    tests[\"leql statement is good\"] = jsonData.leql.statement === \"where(/.*/)\";\n    tests[\"leql time range is good\"] = jsonData.leql.during.time_range === \"Today\";\n    \n    postman.setEnvironmentVariable(\"continue_link\", jsonData.links[0].href);\n}"
							}
						}
					],
					"request": {
						"url": "{{url}}/query/logs",
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{read_only_key}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"logs\": [\n    \"{{log_id}}\"\n  ],\n  \"leql\": {\n    \"during\": {\n      \"time_range\": \"Today\"\n    },\n    \"statement\": \"where(/.*/)\"\n  }\n}"
						},
						"description": "Get a list of all Tags for a given account"
					},
					"response": []
				},
				{
					"name": "Run Continue call",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "postman.clearEnvironmentVariable(\"continue_link\");\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Response time is less than 300ms\"] = responseTime < 300;\n\nif (responseCode.code === 200) {\n    var jsonData = JSON.parse(responseBody);\n    \n    tests[\"leql statement is good\"] = jsonData.leql.statement === \"where(/.*/)\";\n    tests[\"leql time range is good\"] = jsonData.leql.during.time_range === \"Today\";\n    \n    \n    tests[\"assert we checked the correct log\"] = jsonData.logs[0] === environment.log_id;\n    tests[\"assert we get some events back\"] = jsonData.events.length > 0;\n}"
							}
						}
					],
					"request": {
						"url": "{{continue_link}}",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Tag Management",
			"description": "",
			"item": [
				{
					"name": "Get all Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "tests[\"Status code is 202\"] = responseCode.code === 200;\ntests[\"Response time is less than 2s\"] = responseTime < 2000;\n\nif (responseCode.code === 200) {\n    var jsonData = JSON.parse(responseBody);\n    \n    tests[\"A not empty array of tags is returned\"] = jsonData.tags.length > 0;\n}"
							}
						}
					],
					"request": {
						"url": "{{url}}/management/tags",
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{read_only_key}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": "Get a list of all Tags for a given account"
					},
					"response": []
				},
				{
					"name": "Create new tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "tests[\"Status code is 201\"] = responseCode.code === 201;\ntests[\"Response time is less than 2s\"] = responseTime < 2000;\n\nif (responseCode.code === 201) {\n    var jsonData = JSON.parse(responseBody);\n    \n    tests[\"Type is alert\"] = jsonData.tag.type === \"Alert\";\n    tests[\"Name is correct\"] = jsonData.tag.name === \"Postman Test Tag\";\n    tests[\"Source is correct\"] = jsonData.tag.sources[0].id === environment.log_id;\n    tests[\"Pattern is correct\"] = jsonData.tag.patterns[0] === \"/postman_testing_tag/\";\n    \n    postman.setEnvironmentVariable(\"new_tag_id\", jsonData.tag.id);\n}"
							}
						}
					],
					"request": {
						"url": "{{url}}/management/tags",
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{read_write_key}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"tag\": {\n    \"actions\": [],\n    \"labels\": [\n\t    {\n\t      \"id\": \"474687b6-5ee4-48da-abfb-92c4c93e3ba5\",\n          \"sn\": 1010,\n          \"name\": \"CPU max usage\",\n          \"color\": \"ff003f\",\n          \"reserved\": false\n\t    }\n    ],\n    \"name\": \"Postman Test Tag\",\n    \"patterns\": [\n      \"/postman_testing_tag/\"\n    ],\n    \"sources\": [\n      {\n        \"id\": \"{{log_id}}\"\n      }\n    ],\n    \"type\": \"Alert\"\n  }\n}"
						},
						"description": "Get a list of all Tags for a given account"
					},
					"response": []
				},
				{
					"name": "Rename Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Response time is less than 2s\"] = responseTime < 2000;\n\nif (responseCode.code === 200) {\n    var jsonData = JSON.parse(responseBody);\n    tests[\"Name is correct\"] = jsonData.tag.name === \"Postman new name\";\n}"
							}
						}
					],
					"request": {
						"url": "{{url}}/management/tags/{{new_tag_id}}",
						"method": "PATCH",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{read_write_key}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"tag\": {\n   \"name\": \"Postman new name\"\n  }\n}"
						},
						"description": "Get a list of all Tags for a given account"
					},
					"response": []
				},
				{
					"name": "Investigate newly created Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "tests[\"Status code is 201\"] = responseCode.code === 200;\ntests[\"Response time is less than 2s\"] = responseTime < 2000;\n\nif (responseCode.code === 200) {\n    var jsonData = JSON.parse(responseBody);\n    \n    tests[\"Type is alert\"] = jsonData.tag.type === \"Alert\";\n    tests[\"Name is correct\"] = jsonData.tag.name === \"Postman Test Tag\";\n    tests[\"Source is correct\"] = jsonData.tag.sources[0].id === environment.log_id;\n    tests[\"Pattern is correct\"] = jsonData.tag.patterns[0] === \"/postman_testing_tag/\";\n    \n    postman.setEnvironmentVariable(\"new_tag_id\", jsonData.tag.id);\n}"
							}
						}
					],
					"request": {
						"url": "{{url}}/management/tags/{{new_tag_id}}",
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{read_write_key}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"tag\": {\n   \"name\": [\n      \"postman new name\"\n    ]\n  }\n}"
						},
						"description": "Get a list of all Tags for a given account"
					},
					"response": []
				},
				{
					"name": "Get all Labels for newly created tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "tests[\"Status code is 202\"] = responseCode.code === 200;\ntests[\"Response time is less than 2s\"] = responseTime < 2000;\n"
							}
						}
					],
					"request": {
						"url": "{{url}}/management/tags/{{new_tag_id}}/labels",
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{read_write_key}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete newly created tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Response time is less than 2s\"] = responseTime < 2000;\n\npostman.clearEnvironmentVariable(\"new_tag_id\");\n"
							}
						}
					],
					"request": {
						"url": "{{url}}/management/tags/{{new_tag_id}}",
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{read_write_key}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Get a list of all Tags for a given account"
					},
					"response": []
				},
				{
					"name": "Get all Labels",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "tests[\"Status code is 202\"] = responseCode.code === 200;\ntests[\"Response time is less than 2s\"] = responseTime < 2000;\n"
							}
						}
					],
					"request": {
						"url": "{{url}}/management/labels",
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{read_write_key}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "User Management",
			"description": "",
			"item": [
				{
					"name": "Get Account Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\nif (responseCode.code === 200) {\n    var jsonData = JSON.parse(responseBody);\n    \n    tests[\"account_id matches expected account id\"] = jsonData.account.id === environment.account_id;\n    tests[\"retention period is 7 days\"] = jsonData.account.retention_period === 7*24*60*60*1000;\n    tests[\"owner api key is correct\"] = jsonData.account.owner_api_key_id === environment.owner_api_key_id;\n    tests[\"read write key is correct\"] = jsonData.account.rw_api_key === environment.read_write_key;\n    tests[\"read only key is correct\"] = jsonData.account.ro_api_key === environment.read_only_key;\n}"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": "var time = new Date().toUTCString();\n\n// Build the request body string from the Postman request.data object\nvar requestBody = \"\";\nvar requestBody = \"\";\n    var firstpass = true;\n    for(var param in request.data)\n    {\n        if(!firstpass){\n            requestBody += \"&\";\n        }\n        requestBody += param + \"=\" + request.data[param];\n        firstpass = false;\n    }\n\nvar b64BodyContent = CryptoJS.SHA256(requestBody).toString(CryptoJS.enc.Base64);\nvar uri = request.url.split(\"{{url}}\")[1];\nuri = uri.replace(/{{(\\w+)}}/g, function me(match, capture) {return environment[capture];});\n\nvar rawSignature = request.method + \"application/json\" + time + uri + b64BodyContent;\n\nvar hmac = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA1(rawSignature, environment.owner_api_key));\nvar signature = environment.owner_api_key_id.concat(\":\").concat(hmac);\n\npostman.setEnvironmentVariable('rawSignature', rawSignature);\npostman.setEnvironmentVariable('time', time);\npostman.setEnvironmentVariable('signature', signature);"
							}
						}
					],
					"request": {
						"url": "{{url}}management/accounts/{{account_id}}",
						"method": "GET",
						"header": [
							{
								"key": "Date",
								"value": "{{time}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "authorization-api-key",
								"value": "{{signature}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\nif (responseCode.code === 200) {\n    var jsonData = JSON.parse(responseBody);\n    \n    tests[\"users are listed\"] = jsonData.users.length > 0;\n    tests[\"A user id is listed\"] = jsonData.users[0].id.length > 0;\n    \n    postman.setEnvironmentVariable(\"sample_user_id\", jsonData.users[0].id);\n}"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": "var time = new Date().toUTCString();\n\n// Build the request body string from the Postman request.data object\nvar requestBody = \"\";\nvar requestBody = \"\";\n    var firstpass = true;\n    for(var param in request.data)\n    {\n        if(!firstpass){\n            requestBody += \"&\";\n        }\n        requestBody += param + \"=\" + request.data[param];\n        firstpass = false;\n    }\n\nvar b64BodyContent = CryptoJS.SHA256(requestBody).toString(CryptoJS.enc.Base64);\nvar uri = request.url.split(\"{{url}}\")[1];\nuri = uri.replace(/{{(\\w+)}}/g, function me(match, capture) {return environment[capture];});\n\nvar rawSignature = request.method + \"application/json\" + time + uri + b64BodyContent;\n\nvar hmac = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA1(rawSignature, environment.owner_api_key));\nvar signature = environment.owner_api_key_id.concat(\":\").concat(hmac);\n\npostman.setEnvironmentVariable('rawSignature', rawSignature);\npostman.setEnvironmentVariable('time', time);\npostman.setEnvironmentVariable('signature', signature);"
							}
						}
					],
					"request": {
						"url": "{{url}}management/accounts/{{account_id}}/users",
						"method": "GET",
						"header": [
							{
								"key": "Date",
								"value": "{{time}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "authorization-api-key",
								"value": "{{signature}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get Specific User Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\nif (responseCode.code === 200) {\n    var jsonData = JSON.parse(responseBody);\n    \n    tests[\"user id is correct\"] = jsonData.user.id === environment.sample_user_id;\n    tests[\"last login was this week\"] = new Date().getTime()/1000 - jsonData.user.last_login < 604800000;\n}"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": "var time = new Date().toUTCString();\n\n// Build the request body string from the Postman request.data object\nvar requestBody = \"\";\nvar requestBody = \"\";\n    var firstpass = true;\n    for(var param in request.data)\n    {\n        if(!firstpass){\n            requestBody += \"&\";\n        }\n        requestBody += param + \"=\" + request.data[param];\n        firstpass = false;\n    }\n\nvar b64BodyContent = CryptoJS.SHA256(requestBody).toString(CryptoJS.enc.Base64);\nvar uri = request.url.split(\"{{url}}\")[1];\nuri = uri.replace(/{{(\\w+)}}/g, function me(match, capture) {return environment[capture];});\n\nvar rawSignature = request.method + \"application/json\" + time + uri + b64BodyContent;\n\nvar hmac = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA1(rawSignature, environment.owner_api_key));\nvar signature = environment.owner_api_key_id.concat(\":\").concat(hmac);\n\npostman.setEnvironmentVariable('rawSignature', rawSignature);\npostman.setEnvironmentVariable('time', time);\npostman.setEnvironmentVariable('signature', signature);"
							}
						}
					],
					"request": {
						"url": "{{url}}management/accounts/{{account_id}}/users/{{sample_user_id}}",
						"method": "GET",
						"header": [
							{
								"key": "Date",
								"value": "{{time}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "authorization-api-key",
								"value": "{{signature}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "get rate limits",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": "tests[\"Status code is 202\"] = responseCode.code === 200;\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\nif (responseCode.code === 200) {\n    var jsonData = JSON.parse(responseBody);\n    \n    tests[\"Query limit is 1000\"] = jsonData.endpoints.query.limit === 1000;\n    tests[\"Query Remaining is over 900 \"] = jsonData.endpoints.query.remaining > 900;\n}"
					}
				}
			],
			"request": {
				"url": "{{url}}rate_limit/endpoints/{{read_only_key}}",
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{read_only_key}}",
						"description": ""
					},
					{
						"key": "Accept",
						"value": "application/json",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"logs\": [\"cee46d63-b859-4046-ae4b-9e8368658bfe\"],\n  \"leql\": {\n    \"during\": {\n      \"time_range\": \"last 2 min\"\n    },\n    \"statement\": \"where(/.*/)\"\n  }\n}"
				},
				"description": ""
			},
			"response": []
		}
	]
}
